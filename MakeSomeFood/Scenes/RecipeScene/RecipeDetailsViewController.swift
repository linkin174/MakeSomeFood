//
//  RecipeDetailsViewController.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 14.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import SafariServices
import SnapKit
import UIKit

protocol RecipeDetailsDisplayLogic: AnyObject {
    func displayRecipeDetails(viewModel: RecipeDetails.ShowRecipeDetails.ViewModel)
}

final class RecipeDetailsViewController: UIViewController, RecipeDetailsDisplayLogic {
    // MARK: - Public Properties

    var interactor: RecipeDetailsBusinessLogic?
    var router: (NSObjectProtocol & RecipeDetailsRoutingLogic & RecipeDetailsDataPassing)?

    // MARK: - Private propertis

    private var viewModel: RecipeDetails.ShowRecipeDetails.ViewModel?
    private let labelEdgeInsets = UIEdgeInsets(top: 5, left: 10, bottom: 5, right: 10)

    // MARK: - Views

    private let blurView: UIVisualEffectView = {
        let blurEffect = UIBlurEffect(style: .light)
        let view = UIVisualEffectView(effect: blurEffect)
        view.alpha = 0
        return view
    }()

    private let scrollView: UIScrollView = {
        let scrollView = UIScrollView()
        scrollView.bounces = true
        scrollView.isUserInteractionEnabled = true
        return scrollView
    }()

    private lazy var nutritionFactsView: NutritionFactsView = {
        let view = NutritionFactsView()
        let swipeGesture = UIPanGestureRecognizer(target: self, action: #selector(hideNutritionFacts))
        view.isUserInteractionEnabled = true
        view.addGestureRecognizer(swipeGesture)
        return view
    }()

    private let containerView = UIView()

    private let recipeImageView: CachedUIImageView = {
        let imageView = CachedUIImageView()
        imageView.image = UIImage(named: "placeholder")
        imageView.contentMode = .scaleAspectFit
        imageView.layer.cornerRadius = 16
        imageView.layer.maskedCorners = [.layerMinXMaxYCorner, .layerMaxXMaxYCorner]
        imageView.clipsToBounds = true
        return imageView
    }()

    private let recipeTitleLabel = UILabel.makeUILabel(font: .systemFont(ofSize: 20, weight: .semibold))

    private let ingiridientsLabel = UILabel.makeUILabel(text: "List of ingridients:", font: .systemFont(ofSize: 18, weight: .semibold))
    private let totalNutrientsLabel = UILabel.makeUILabel(text: "Total Nutrients:", font: .systemFont(ofSize: 18, weight: .semibold))

    private let ingridientsStack: UIStackView = {
        let stack = UIStackView()
        stack.alignment = .leading
        stack.axis = .vertical
        stack.distribution = .fill
        stack.spacing = 4
        return stack
    }()

    private lazy var showSafariViewButton: UIButton = {
        let button = UIButton(type: .custom)
        button.setTitleColor(.white, for: .normal)
        button.setTitle("Cooking Details", for: .normal)
        button.layer.cornerRadius = 20
        button.contentEdgeInsets = UIEdgeInsets(top: 0, left: 10, bottom: 0, right: 10)
        button.backgroundColor = .mainAccentColor
        button.addTarget(self, action: #selector(showSafariView), for: .touchUpInside)
        button.dropShadow()
        return button
    }()

    private lazy var showNutritionFactsButton: UIButton = {
        let button = UIButton()
        button.setImage(UIImage(systemName: "tablecells.badge.ellipsis"), for: .normal)
        button.layer.cornerRadius = 20
        button.backgroundColor = .mainAccentColor
        button.addTarget(self, action: #selector(showNutritionFacts), for: .touchUpInside)
        button.imageView?.tintColor = .white
        return button
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
        setupConstraints()
        setupNavigationBar()
        start()
    }

    // MARK: - Setup Clean Code Design Pattern

    private func setup() {
        let viewController = self
        let interactor = RecipeDetailsInteractor()
        let presenter = RecipeDetailsPresenter()
        let router = RecipeDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    private func setupNavigationBar() {
        navigationController?.navigationBar.tintColor = .white
    }

    private func setupConstraints() {


        // ScrollView Setup
        containerView.backgroundColor = #colorLiteral(red: 0.4093237323, green: 0.7990826964, blue: 0, alpha: 0.195099915)
        view.addSubview(scrollView)
        scrollView.snp.makeConstraints { make in
            #warning("wrong scrollview calc")
            make.edges.equalToSuperview()
        }


        // Container view setup
        scrollView.addSubview(containerView)

        containerView.snp.makeConstraints { make in
            make.width.equalToSuperview()
            make.centerX.equalToSuperview()
            make.top.equalTo(view.snp.topMargin)
            make.bottom.equalTo(view.snp.bottomMargin)
//            make.edges.equalToSuperview()
        }

        // ImageView Setup
        containerView.addSubview(recipeImageView)

        recipeImageView.snp.makeConstraints { make in
            make.top.equalToSuperview()
            make.width.equalToSuperview()
            make.height.equalTo(containerView.snp.width)
        }

        // SafariButton Setup

        containerView.addSubview(showSafariViewButton)

        showSafariViewButton.snp.makeConstraints { make in
            make.trailing.equalToSuperview().inset(16)
            make.height.equalTo(40)
            make.bottom.equalTo(recipeImageView.snp.bottom).inset(16)
        }

        containerView.addSubview(showNutritionFactsButton)
        showNutritionFactsButton.snp.makeConstraints { make in
            make.width.height.equalTo(40)
            make.bottom.equalTo(recipeImageView.snp.bottom).inset(16)
            make.leading.equalToSuperview().offset(16)
        }

        // Setup TitleLabel

        containerView.addSubview(recipeTitleLabel)

        recipeTitleLabel.snp.makeConstraints { make in
            make.top.equalTo(recipeImageView.snp.bottom).offset(8)
            make.width.equalToSuperview().inset(8)
            make.centerX.equalToSuperview()
        }

        // Insert separator
        let separator = makeSeparator()
        containerView.addSubview(separator)
        separator.snp.makeConstraints { make in
            make.width.equalToSuperview()
            make.top.equalTo(recipeTitleLabel.snp.bottom).offset(8)
        }

        // Ingridients label setup

        containerView.addSubview(ingiridientsLabel)
        ingiridientsLabel.snp.makeConstraints { make in
            make.leading.equalToSuperview().offset(8)
            make.top.equalTo(separator.snp.bottom).offset(8)
        }

        // Setup ingridients stack
        containerView.addSubview(ingridientsStack)
        ingridientsStack.snp.makeConstraints { make in
            make.top.equalTo(ingiridientsLabel.snp.bottom).offset(8)
            make.width.equalToSuperview().inset(8)
            make.centerX.equalToSuperview()
        }

        let separatorTwo = makeSeparator()
        containerView.addSubview(separatorTwo)
        separatorTwo.snp.makeConstraints { make in
            make.top.equalTo(ingridientsStack.snp.bottom).offset(18)
            make.width.equalToSuperview()
        }

        containerView.addSubview(totalNutrientsLabel)
        totalNutrientsLabel.snp.makeConstraints { make in
            make.leading.equalToSuperview().offset(8)
            make.top.equalTo(separatorTwo.snp.bottom).offset(8)
        }

        containerView.addSubview(blurView)
        blurView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }

        containerView.addSubview(nutritionFactsView)
        nutritionFactsView.snp.makeConstraints { make in
            make.leading.trailing.equalToSuperview().inset(32)
            make.height.equalToSuperview().inset(32)
            make.bottom.equalTo(containerView.snp.top)
        }
    }

    @objc private func showSafariView(_ sender: UIButton) {
        guard
            let viewModel,
            let url = URL(string: viewModel.recipeURL)
        else { return }
        let config = SFSafariViewController.Configuration()
        config.entersReaderIfAvailable = true
        let safariVC = SFSafariViewController(url: url, configuration: config)
        present(safariVC, animated: true)
    }

    @objc private func showNutritionFacts() {
        UIView.animate(withDuration: 0.5, delay: 0) {
            self.blurView.alpha = 1
            self.nutritionFactsView.snp.remakeConstraints { make in
                make.width.height.equalToSuperview().inset(32)
                make.centerX.centerY.equalToSuperview()
            }
            self.view.layoutIfNeeded()
        }
    }

    @objc private func hideNutritionFacts(_ sender: UIPanGestureRecognizer) {
        #warning("track states of gesture")

        let translation = sender.translation(in: view)
        #warning("continue swipe gesture")
        guard translation.y < 0 else { return }
        UIView.animate(withDuration: 0.5) {
            if translation.y < -50 {
                sender.view?.snp.remakeConstraints({ make in
                    make.width.height.equalToSuperview().inset(32)
                    make.bottom.equalTo(self.containerView.snp.top)
                })
            } else {
                sender.view?.snp.updateConstraints({ make in
                    make.centerY.equalToSuperview()
                })
            }
            sender.view?.snp.updateConstraints { make in
                make.centerY.equalToSuperview().offset(translation.y)
            }
        }
        self.view.layoutIfNeeded()
//        UIView.animate(withDuration: 0.5, delay: 0) {
//            self.blurView.alpha = 0
//            self.nutritionFactsView.snp.remakeConstraints { make in
//                make.leading.trailing.equalToSuperview().inset(32)
//                make.height.equalToSuperview().inset(32)
//                make.bottom.equalTo(self.view.snp.top)
//            }
//            self.view.layoutIfNeeded()
//        }
    }

    private func makeSeparator(color: UIColor = .black, thickness: CGFloat = 1) -> UIView {
        let view = UIView()
        view.backgroundColor = color
        view.snp.makeConstraints { make in
            make.height.equalTo(thickness)
        }
        return view
    }

    // MARK: - request data from RecipeDetailsInteractor

    func start() {
        interactor?.start()
    }

    // MARK: - display view model from RecipeDetailsPresenter

    func displayRecipeDetails(viewModel: RecipeDetails.ShowRecipeDetails.ViewModel) {
        self.viewModel = viewModel

        guard let url = URL(string: viewModel.imageURL) else { return }
        recipeImageView.setImageFrom(url: url)

        recipeTitleLabel.text = viewModel.title

        viewModel.ingridientLines.forEach { ingridientLine in
            let labelEdgeInsets = UIEdgeInsets(top: 5, left: 10, bottom: 5, right: 10)
            let label = PaddingLabel(withEdgeInsets: labelEdgeInsets, text: ingridientLine)
            label.backgroundColor = .white
            label.layer.cornerRadius = 15
            label.clipsToBounds = true
            ingridientsStack.addArrangedSubview(label)
        }
        nutritionFactsView.setup(with: viewModel.nutritionFactsViewModel)
    }
}
