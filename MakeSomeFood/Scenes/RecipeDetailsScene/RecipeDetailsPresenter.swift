//
//  RecipeDetailsPresenter.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 14.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RecipeDetailsPresentationLogic {
    func presentRecipeDetails(response: RecipeDetails.ShowRecipeDetails.Response)
    func presentUpdatedImage(response: RecipeDetails.UpdateImage.Response)
    func presentFavoriteState(response: RecipeDetails.SetFavoriteState.Response)
}

final class RecipeDetailsPresenter: RecipeDetailsPresentationLogic {
    // MARK: - Public properties

    weak var viewController: RecipeDetailsDisplayLogic?

    // MARK: - Presentation Logic

    func presentRecipeDetails(response: RecipeDetails.ShowRecipeDetails.Response) {
        let recipe = response.recipe

        let existingIngredients = response.existingIngredientLabels
        #warning("not used")
        var cookingTime: String? {
            if recipe.totalTime != 0 {
                let formatString = NSLocalizedString("TIME_LOCALIZATION", comment: "time")
                let localized = String.localizedStringWithFormat(formatString, recipe.totalTime ?? 0)
                return localized
            } else {
                return nil
            }
        }

        let nutritionFactsViewModel = NutritionFactsViewModel(recipe: recipe)

        let ingredientRowViewModels = recipe.ingredients?.compactMap { ingredient in
            let isExisting = existingIngredients.contains(ingredient.food ?? "")

            return IngredientRowViewModel(imageURL: ingredient.image ?? "",
                                          name: ingredient.text ?? "",
                                          food: ingredient.food ?? "",
                                          weight: String(format: "%.f", ingredient.weight ?? 0),
                                          isExisting: isExisting)
        }

        let viewModel = RecipeDetails.ShowRecipeDetails.ViewModel(imageURL: URL(string: recipe.images?.small?.url ?? ""),
                                                                  recipeURL: recipe.url ?? "",
                                                                  title: recipe.label ?? "",
                                                                  totalWeight: String(format: "%.f", recipe.totalWeight ?? 0),
                                                                  coockingTime: cookingTime,
                                                                  isFavorite: response.isFavorite,
                                                                  nutritionFactsViewModel: nutritionFactsViewModel,
                                                                  ingredientRows: ingredientRowViewModels ?? [])

        viewController?.displayRecipeDetails(viewModel: viewModel)
    }

    func presentUpdatedImage(response: RecipeDetails.UpdateImage.Response) {
        guard
            let highResImage = response.recipe.images?.allProperties()
                .compactMap({ $0.value as? ImageSize })
                .max(by: { $0.width ?? 0 < $1.width ?? 0 }),
            let url = URL(string: highResImage.url ?? "")
        else {
            return
        }
        let viewModel = RecipeDetails.UpdateImage.ViewModel(imageURL: url)
        viewController?.displayUpdatedImage(viewModel: viewModel)
    }

    func presentFavoriteState(response: RecipeDetails.SetFavoriteState.Response) {
        let viewModel = RecipeDetails.SetFavoriteState.ViewModel(isFavorite: response.isFavorite)
        viewController?.displayFavoriteState(viewModel: viewModel)
    }
}
