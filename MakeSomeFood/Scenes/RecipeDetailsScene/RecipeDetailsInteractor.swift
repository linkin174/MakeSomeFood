//
//  RecipeDetailsInteractor.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 14.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RecipeDetailsBusinessLogic {
    func start()
    func saveIngredient(request: RecipeDetails.SaveIngredient.Request)
    func removeIngredient(request: RecipeDetails.RemoveIngredient.Request)
}

protocol RecipeDetailsDataStore {
    var recipe: Recipe? { get set }
}

class RecipeDetailsInteractor: RecipeDetailsBusinessLogic, RecipeDetailsDataStore {

    var recipe: Recipe?

    var presenter: RecipeDetailsPresentationLogic?

    // MARK: - Private properties

    private let storageService: StorageService

    // MARK: - Initializers

    init(storageService: StorageService) {
        self.storageService = storageService
    }

    // MARK: Do something (and send response to RecipeDetailsPresenter)

    func start() {
        guard let recipe else { return }
        let existingIngredients = storageService.loadIngredients()
        let response = RecipeDetails.ShowRecipeDetails.Response(recipe: recipe, existingIngredients: existingIngredients)
        presenter?.presentRecipeDetails(response: response)
    }

    func saveIngredient(request: RecipeDetails.SaveIngredient.Request) {
        let ingredientName = request.name
        guard let ingredient = recipe?.ingredients.first(where: { $0.text == ingredientName }) else { return }
        storageService.save(ingredient: ingredient)
    }

    func removeIngredient(request: RecipeDetails.RemoveIngredient.Request) {
        let ingredientName = request.name
        guard let ingredient = recipe?.ingredients.first(where: { $0.text == ingredientName }) else { return }
        storageService.remove(ingredient: ingredient)
    }
}
