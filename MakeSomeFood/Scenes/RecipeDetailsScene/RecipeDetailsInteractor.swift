//
//  RecipeDetailsInteractor.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 14.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RecipeDetailsBusinessLogic {
    func start()
    func handleIngredient(request: RecipeDetails.HandleIngredient.Request)
    func handleFavorite(state: Bool)
}

protocol RecipeDetailsDataStore {
    var recipe: Recipe? { get set }
}

class RecipeDetailsInteractor: RecipeDetailsBusinessLogic, RecipeDetailsDataStore {

    // MARK: - Public Properties

    var recipe: Recipe?
    var presenter: RecipeDetailsPresentationLogic?

    // MARK: - Private properties

    private let storageService: StorageService

    // MARK: - Initializers

    init(storageService: StorageService) {
        self.storageService = storageService
    }

    // MARK: - Intercation Logic

    func start() {
        guard var recipe else { return }
        let favoriteState = storageService.loadFavorites().contains(recipe)
        recipe.isFavorite = favoriteState
        let existingIngredients = storageService.loadIngredients()
        let response = RecipeDetails.ShowRecipeDetails.Response(recipe: recipe,
                                                                existingIngredients: existingIngredients)
        presenter?.presentRecipeDetails(response: response)
    }

    func handleIngredient(request: RecipeDetails.HandleIngredient.Request) {
        guard let ingredient = recipe?.ingredients.first(where: { $0.text == request.name }) else { return }
        if request.state {
            storageService.save(ingredient: ingredient)
        } else {
            storageService.remove(ingredient: ingredient)
        }
    }

    func handleFavorite(state: Bool) {
        guard var recipe else { return }
        if state {
            recipe.isFavorite = true
            storageService.addFavorite(recipe: recipe)
        } else {
            recipe.isFavorite = false
            storageService.removeFavorite(recipe: recipe)
        }
        let response = RecipeDetails.HandleFavorites.Response(state: state)
        presenter?.presentFavoriteState(response: response)
    }
}
