//
//  RecipeDetailsInteractor.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 14.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol RecipeDetailsBusinessLogic {
    func showRecipeDetails()
    func changeFavoriteState()
    func handleIngredient(request: RecipeDetails.HandleIngredient.Request)
}

protocol RecipeDetailsDataStore {
    var recipe: Recipe? { get set }
    var isFavorite: Bool { get set }
}

class RecipeDetailsInteractor: RecipeDetailsBusinessLogic, RecipeDetailsDataStore {

    // MARK: - Public Properties

    var presenter: RecipeDetailsPresentationLogic?
    var worker: FavoritesWorkerProtocol?
    var recipe: Recipe?
    var isFavorite: Bool = false


    // MARK: - Private properties

    private let storageService: StoringProtocol

    // MARK: - Initializers

    init(storageService: StoringProtocol) {
        self.storageService = storageService
        #warning("something wrong here, maybe init?")
        worker = FavoritesWorker(storageService: storageService)
    }

    // MARK: - Intercation Logic

    func showRecipeDetails() {
        guard let recipe else { return }
        isFavorite = worker?.getFavoriteStatus(for: recipe) ?? false
        let existingIngredients = storageService.loadIngredients()
        let response = RecipeDetails.ShowRecipeDetails.Response(recipe: recipe,
                                                                isFavorite: isFavorite,
                                                                existingIngredientLabels: existingIngredients)
        presenter?.presentRecipeDetails(response: response)
    }

    func changeFavoriteState() {
        guard let recipe else { return }
        isFavorite.toggle()
        worker?.setFavoriteStatus(for: recipe, state: isFavorite)
        let response = RecipeDetails.SetFavoriteState.Response(isFavorite: isFavorite)
        presenter?.presentFavoriteState(response: response)
    }

    #warning("think about saving ingredients. Maybe model")
    func handleIngredient(request: RecipeDetails.HandleIngredient.Request) {
        if request.state {
            storageService.save(ingredient: request.name)
        } else {
            storageService.remove(ingredient: request.name)
        }
    }
}
