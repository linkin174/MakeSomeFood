//
//  RecipeDetailsModels.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 14.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum RecipeDetails {
    enum ShowRecipeDetails {
        struct Response {
            let recipe: Recipe
            let isFavorite: Bool
            let existingIngredientLabels: [String]
        }

        struct ViewModel {
            let imageURL: URL?
            let recipeURL: String
            let title: String
            let totalWeight: String
            let coockingTime: String?
            let isFavorite: Bool
            let nutritionFactsViewModel: NutritionFactsViewModelProtocol
            let ingredientRows: [IngredientViewModelProtocol]
        }
    }

    enum UpdateImage {
        struct Response {
            let recipe: Recipe
        }

        struct ViewModel {
            let imageURL: URL
        }
    }

    enum SetFavoriteState {
        struct Response {
            let isFavorite: Bool
        }

        struct ViewModel {
            let isFavorite: Bool
        }
    }

    enum HandleIngredient {
        struct Request {
            let name: String
            let state: Bool
        }
    }
}

struct NutritionFactsViewModel: NutritionFactsViewModelProtocol {
    var servings: String {
        "Servings: \(Int(recipe.yield ?? 0))"
    }

    var caloriesPerServing: String {
        let caloriesPerServing = (recipe.calories ?? 0) / (recipe.yield ?? 0)
        return String(format: "%.f", caloriesPerServing)
    }

    var nutrientsRowViewModels: [NutrientRowViewModelProtocol] {
        return makeNutrientViewModels()
    }

    var vitaminsRowViewModels: [NutrientRowViewModelProtocol] {
        makeVitaminsViewModels()
    }

    private var recipe: Recipe

    init(recipe: Recipe) {
        self.recipe = recipe
    }

    private func makeNutrientViewModels() -> [NutrientRowViewModelProtocol] {
        guard let digest = recipe.digest else { return [] }
        return digest
            .filter { $0.unit == "g" && $0.label != "Water" && $0.total ?? 0 > 0 }
            .map { NutrientRowViewModel(digest: $0, servings: recipe.yield ?? 0) }
    }

    private func makeVitaminsViewModels() -> [NutrientRowViewModelProtocol] {
        guard let digest = recipe.digest else { return [] }
        return digest
            .filter { $0.unit != "g" && $0.total ?? 0 > 0 }
            .sorted(by: { $0.daily ?? 0 > $1.daily ?? 0 })
            .prefix(10)
            .map { NutrientRowViewModel(digest: $0, servings: recipe.yield ?? 0) }
    }
}

struct NutrientRowViewModel: NutrientRowViewModelProtocol {
    var name: String {
        digest.label ?? ""
    }

    var value: String {
        String(format: "%.f", (digest.total ?? 0) / servings)
    }

    var unit: String {
        digest.unit ?? "g"
    }

    var dailyPercentage: String {
        "\(String(format: "%.f", (digest.daily ?? 0) / servings)) %"
    }

    private let digest: Digest
    private let servings: Double

    init(digest: Digest, servings: Double) {
        self.digest = digest
        self.servings = servings
    }
}

struct IngredientRowViewModel: IngredientViewModelProtocol {
    let imageURL: String
    let name: String
    let food: String
    let weight: String
    var isExisting: Bool
}
