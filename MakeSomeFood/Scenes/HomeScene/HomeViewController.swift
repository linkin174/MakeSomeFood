//
//  HomeViewController.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 14.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SnapKit

protocol HomeDisplayLogic: AnyObject {
    func displayRandomRecipies(viewModel: Home.LoadRandomRecipies.ViewModel)
    func displayError(viewModel: Home.HandleError.ViewModel)
}

class HomeViewController: UIViewController, HomeDisplayLogic {

    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?

    // MARK: - Private properties

    private var viewModel = Home.LoadRandomRecipies.ViewModel(cells: []) {
        didSet {
            collectionView.reloadData()
        }
    }

    // MARK: - Views

    lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.sectionInset = UIEdgeInsets(top: 8, left: 8, bottom: 8, right: 8)
        layout.minimumInteritemSpacing = 8
        layout.minimumLineSpacing = 8
        let itemSide = view.bounds.width / 2 - layout.minimumInteritemSpacing * 1.5
        layout.itemSize = CGSize(width: itemSide, height: itemSide)

        let collectionView = UICollectionView(frame: view.bounds, collectionViewLayout: layout)
        collectionView.backgroundColor = .white
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.showsVerticalScrollIndicator = false
        collectionView.register(RecipeCell.self, forCellWithReuseIdentifier: RecipeCell.reuseID)
        return collectionView
    }()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup Clean Code Design Pattern 

    private func setup() {
        let viewController = self
        let networkService = NetworkService()
        let interactor = HomeInteractor(networkService: networkService)
        let presenter = HomePresenter(networkService: networkService)
        let router = HomeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.addSubview(collectionView)
        setupNavigationBar()
        setupTabBar()
        interactor?.viewDidLoad()
    }

    // MARK: - Private methods

    private func setupNavigationBar() {
        title = "Home"
        let appearence = UINavigationBarAppearance()
        appearence.largeTitleTextAttributes = [.foregroundColor: UIColor.white]
        appearence.titleTextAttributes = [.foregroundColor: UIColor.white]
        appearence.backgroundColor = #colorLiteral(red: 0.4139624238, green: 0.7990826964, blue: 0.003590217093, alpha: 1)
        navigationController?.navigationBar.compactAppearance = appearence
        navigationController?.navigationBar.scrollEdgeAppearance = appearence
        navigationController?.navigationBar.standardAppearance = appearence
//        self.navigationItem.rightBarButtonItem = UIBarButtonItem(image: UIImage(systemName: "line.3.horizontal"), style: .plain, target: self, action: #selector(showFilters))
//        tabBarController?.navigationItem.rightBarButtonItems = [UIBarButtonItem(image: UIImage(systemName: "line.3.horizontal"), style: .plain, target: self, action: #selector(showFilters))]
        let searchButton =  UIBarButtonItem(image: UIImage(systemName: "magnifyingglass"), style: .plain, target: self, action: #selector(showFilters))
        searchButton.tintColor = .white
        navigationItem.rightBarButtonItem = searchButton
    }

    @objc private func showFilters() {
        #warning("Inject dependency somethere else")
        present(SearchViewController(storageService: StorageService()), animated: true)
    }

    private func setupTabBar() {
        tabBarController?.tabBar.barTintColor = #colorLiteral(red: 0.4139624238, green: 0.7990826964, blue: 0.003590217093, alpha: 1)
        tabBarController?.tabBar.tintColor = .white.withAlphaComponent(0.8)
    }
    
    // MARK: - Display Logic

    func displayRandomRecipies(viewModel: Home.LoadRandomRecipies.ViewModel) {
        DispatchQueue.main.async {
            self.viewModel = viewModel
        }
    }

    func displayError(viewModel: Home.HandleError.ViewModel) {
        showAlert(title: "Something went wrong", message: viewModel.errorMessage)
    }
}

// MARK: - Extensions

extension HomeViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToRecipeDetails()
        collectionView.deselectItem(at: indexPath, animated: true)
    }
}

extension HomeViewController: UICollectionViewDataSource {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        viewModel.cells.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: RecipeCell.reuseID, for: indexPath) as? RecipeCell else { return UICollectionViewCell() }
        let cellVM = viewModel.cells[indexPath.item]
        cell.setup(with: cellVM)
        return cell
    }
}
