//
//  FavoritesViewController.swift
//  MakeSomeFood
//
//  Created by Aleksandr Kretov on 28.02.2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoritesDisplayLogic: AnyObject {
    func displayFavoriteRecipes(viewModel: FavoritesList.ShowFavorites.ViewModel)
}

final class FavoritesViewController: UIViewController, FavoritesDisplayLogic {

    // MARK: - Public Properties

    var interactor: FavoritesBusinessLogic?
    var router: (FavoritesRoutingLogic & FavoritesDataPassing)?

    // MARK: - Private Properties

    private var viewModel: FavoritesList.ShowFavorites.ViewModel?

    // MARK: - Views

    let recipeCollectionView = RecipeCollectionView()

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        FavoritesConfigurator.shared.configure(with: self)
        setupConstraints()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        FavoritesConfigurator.shared.configure(with: self)
        setupConstraints()
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        recipeCollectionView.delegate = self
        recipeCollectionView.dataSource = self
        setupTabBar()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.start()
    }

    // MARK: - Private Methods

    func displayFavoriteRecipes(viewModel: FavoritesList.ShowFavorites.ViewModel) {
        self.viewModel = viewModel
        recipeCollectionView.reloadData()
    }

    private func setupTabBar() {
        tabBarItem = UITabBarItem(title: "Favorites", image: UIImage(systemName: "heart.fill"), tag: 1)
    }

    private func setupConstraints() {
        view.addSubview(recipeCollectionView)

        recipeCollectionView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
        }
    }
}

extension FavoritesViewController: UICollectionViewDelegate {
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        router?.routeToRecipeDetails()
        collectionView.deselectItem(at: indexPath, animated: true)
    }
}

extension FavoritesViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        viewModel?.cells.count ?? 0
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: RecipeCell.reuseID, for: indexPath) as? RecipeCell else { return UICollectionViewCell() }
        if let cellVM = viewModel?.cells[indexPath.item] {
            print("CELL VM IN FAV \(cellVM)")
            cell.viewModel = cellVM
        }
        return cell
    }

}
